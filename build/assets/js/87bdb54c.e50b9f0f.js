"use strict";(self.webpackChunkmy_notes=self.webpackChunkmy_notes||[]).push([[4880],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=l,h=c["".concat(i,".").concat(d)]||c[d]||m[d]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:l,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6302:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),l=(n(7294),n(3905));const r={},o="Student notes",s={unversionedId:"JS201/sprint-1/class-3/student-notes",id:"JS201/sprint-1/class-3/student-notes",title:"Student notes",description:"Essential Javascript Concepts [Class 1,2]",source:"@site/docs/JS201/sprint-1/class-3/student-notes.md",sourceDirName:"JS201/sprint-1/class-3",slug:"/JS201/sprint-1/class-3/student-notes",permalink:"/docs/JS201/sprint-1/class-3/student-notes",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/JS201/sprint-1/class-3/student-notes.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Pre-class Notes",permalink:"/docs/JS201/sprint-1/class-3/preclass-notes"},next:{title:"Instructor Notes",permalink:"/docs/JS201/sprint-1/class-4/instructor-notes"}},i={},p=[{value:"Essential Javascript Concepts Class 1,2",id:"essential-javascript-concepts-class-12",level:2},{value:"Every programming language/library has 2 parts",id:"every-programming-languagelibrary-has-2-parts",level:2},{value:"Student task",id:"student-task",level:2},{value:"How to make the best use of this course",id:"how-to-make-the-best-use-of-this-course",level:2},{value:"Session with one of the best performers of the last Batch",id:"session-with-one-of-the-best-performers-of-the-last-batch",level:2},{value:"<strong>Suggested Watch (optional)</strong>",id:"suggested-watch-optional",level:2},{value:"Block Structure (Sprint 1 to 3)",id:"block-structure-sprint-1-to-3",level:2},{value:"Sprint-4 Mid Term Revision Sprint",id:"sprint-4-mid-term-revision-sprint",level:3},{value:"Sprint-5 Construct week",id:"sprint-5-construct-week",level:2},{value:"Type of problems, you must be able to solve <code>easily</code> by the mid of this course:",id:"type-of-problems-you-must-be-able-to-solve-easily-by-the-mid-of-this-course",level:2},{value:"Problem 1.",id:"problem-1",level:3},{value:"Problem 2.",id:"problem-2",level:3},{value:"Problem 3.",id:"problem-3",level:3},{value:"Problem 4.",id:"problem-4",level:3},{value:"Problem 5.",id:"problem-5",level:3},{value:"Problem 6.",id:"problem-6",level:3},{value:"Problem 7.",id:"problem-7",level:3},{value:"Declaration, Declaration with Initialisation, Assignment, Reassignment",id:"declaration-declaration-with-initialisation-assignment-reassignment",level:2},{value:"What all types of values can be assigned to variables?",id:"what-all-types-of-values-can-be-assigned-to-variables",level:2},{value:"Dynamic Typing",id:"dynamic-typing",level:2},{value:"<code>var</code>, <code>let</code> &amp; <code>const</code>",id:"var-let--const",level:2},{value:"Functions",id:"functions",level:2},{value:"Introduction to CP",id:"introduction-to-cp",level:2},{value:"CP - Steps",id:"cp---steps",level:2},{value:"Things &amp; the places where we store them",id:"things--the-places-where-we-store-them",level:2},{value:"Storing <code>strings</code> vs storing <code>arrays</code>",id:"storing-strings-vs-storing-arrays",level:2},{value:"Primitive Types vs Reference Types",id:"primitive-types-vs-reference-types",level:2},{value:"Primitive types:",id:"primitive-types",level:3},{value:"Reference types:",id:"reference-types",level:3},{value:"Truthy/falsey Values",id:"truthyfalsey-values",level:2},{value:"Type conversions",id:"type-conversions",level:2},{value:"String conversion",id:"string-conversion",level:3},{value:"Numeric conversion",id:"numeric-conversion",level:3},{value:"ParseInt",id:"parseint",level:3},{value:"Technique most used in the industry (coercion technique)",id:"technique-most-used-in-the-industry-coercion-technique",level:3},{value:"Student task:",id:"student-task-1",level:3},{value:"Boolean Conversion",id:"boolean-conversion",level:2},{value:"Ternary Operator",id:"ternary-operator",level:2},{value:"Logical operators with booleans",id:"logical-operators-with-booleans",level:2},{value:"*<strong>*Nullish coalescing operator &#39;??&#39;**</strong>",id:"nullish-coalescing-operator-",level:2},{value:"Loops",id:"loops",level:2},{value:"For",id:"for",level:3},{value:"While",id:"while",level:3},{value:"do \u2026 while",id:"do--while",level:3},{value:"for \u2026 in",id:"for--in",level:3},{value:"for \u2026 of",id:"for--of",level:3},{value:"Arrow functions",id:"arrow-functions",level:2},{value:"Object shorthand",id:"object-shorthand",level:2},{value:"Statements vs Expressions",id:"statements-vs-expressions",level:2},{value:"Lexical Scope",id:"lexical-scope",level:2},{value:"Rest and Spread",id:"rest-and-spread",level:2},{value:"Destructuring Arrays and Objects",id:"destructuring-arrays-and-objects",level:2},{value:"Hoisting",id:"hoisting",level:2},{value:"IIFE - Immediately invoked function expression",id:"iife---immediately-invoked-function-expression",level:2},{value:"Resources:",id:"resources",level:2},{value:"Make sure that students watch both the pre-class videos for the ARRAY Methods. Very important, else it will be difficult to complete Array methods in 1 class.",id:"make-sure-that-students-watch-both-the-pre-class-videos-for-the-array-methods-very-important-else-it-will-be-difficult-to-complete-array-methods-in-1-class",level:2},{value:"The one thing",id:"the-one-thing",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"student-notes"},"Student notes"),(0,l.kt)("h2",{id:"essential-javascript-concepts-class-12"},"Essential Javascript Concepts ","[Class 1,2]"),(0,l.kt)("p",null,"Course intro slides: ",(0,l.kt)("a",{parentName:"p",href:"https://docs.google.com/presentation/d/1jnxlu82zKUp9QZ0b1Czo9frdmcIPaSJ_JyiTIYoBaTI/edit?usp=sharing"},"https://docs.google.com/presentation/d/1jnxlu82zKUp9QZ0b1Czo9frdmcIPaSJ_JyiTIYoBaTI/edit?usp=sharing")," "),(0,l.kt)("h2",{id:"every-programming-languagelibrary-has-2-parts"},"Every programming language/library has 2 parts"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Happy Easy parts"),": used for toy application, easy to teach & learn, most of these never asked in technical interviews"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Real Hard parts"),": used in the real Industry, very hard to teach & requires some effort to learn, Technical interviews are full of question related to the hard parts")),(0,l.kt)("h2",{id:"student-task"},"Student task"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Why do you think \u201creal hard parts\u201d of a language is asked in technical interviews?"),(0,l.kt)("li",{parentName:"ul"},"What would you like to learn from me?"),(0,l.kt)("li",{parentName:"ul"},"Is it going to be easy?")),(0,l.kt)("h2",{id:"how-to-make-the-best-use-of-this-course"},"How to make the best use of this course"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Try your best to solve the problems that I give you, even if its beyond your capacity. It\u2019s okay to make new mistakes.  Trust me, I wont give up on you. I will keep explaining until you get it."),(0,l.kt)("li",{parentName:"ul"},"Don\u2019t depend too much on re-watching the recording. Be very attentive. Use the combination of the notes/code that I provide as much as possible."),(0,l.kt)("li",{parentName:"ul"},"Be an active participant. If we passively listen, we think that we are learning, but actually there\u2019s a very little learning going on. Try to answer every thing that I ask you - yes / no, true / false whatever. Make it a 2-way learning."),(0,l.kt)("li",{parentName:"ul"},"\u201cfinding a concept hard to understand\u201d ",(0,l.kt)("strong",{parentName:"li"},"vs")," \u201cnot being sincere\u201d. I will never give-up on you if you sincere, I have Zero tolerance for insincerity."),(0,l.kt)("li",{parentName:"ul"},"Remind me to give you all a 5 mins break every hour. We don\u2019t want our focus & attention in the class to dip even for a minute. Short breaks are very important."),(0,l.kt)("li",{parentName:"ul"},"\u2714\ufe0f\xa0Read carefully & acknowledge messages coming from important channels")),(0,l.kt)("h2",{id:"session-with-one-of-the-best-performers-of-the-last-batch"},"Session with one of the best performers of the last Batch"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Questions for Rishab Kr. Chaurasiya","  From your perspective, What can students expect from this course? \t","  Which parts of your JS201 course did you like the most? Are you feeling empowered & a step closer to your goals?\t","  How important do you think is Practice? can simply watching me solve problems live make someone a great engineer?\t","  Most of our evaluations happens over CP. How important do you think is to solve assignments before evaluations? \t","  Would you like to give any suggestions / guidance to everyone here so that they can all shine like you? what is your secret of success? Would you like to showcase some ways in which you implemented your learnings?\n")),(0,l.kt)("h2",{id:"suggested-watch-optional"},(0,l.kt)("strong",{parentName:"h2"},"Suggested Watch (optional)")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.khanacademy.org/college-careers-more/learnstorm-growth-mindset-activities-us"},"Growth Mindset")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.khanacademy.org/khan-for-educators/indiacourse/xb6e0f5a42f01e035:get-started-with-khan-academy-eng/xb6e0f5a42f01e035:advanced-introduction-to-mastery-learning/v/khan-academy-view-of-mastery-learning"},"Mastery learning"))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"block-structure-sprint-1-to-3"},"Block Structure (Sprint 1 to 3)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Sprint-1"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Class-1 : Essential Javascript Concepts - I"),(0,l.kt)("li",{parentName:"ul"},"Class-2 : Essential Javascript Concepts - II"),(0,l.kt)("li",{parentName:"ul"},"Class-3 : Array methods in depth - I"),(0,l.kt)("li",{parentName:"ul"},"Class-4: Array methods in depth - II"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Sprint-2"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Class-5 : Functions & Objects in depth"),(0,l.kt)("li",{parentName:"ul"},"Class-6 : Prototypical Inheritance - I"),(0,l.kt)("li",{parentName:"ul"},"Class-7 : Prototypical Inheritance - II"),(0,l.kt)("li",{parentName:"ul"},"Class-8 : Mastering the this keyword"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Sprint-3"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Class-9 : Asynchronous Javascript - I"),(0,l.kt)("li",{parentName:"ul"},"Class-10 : Asynchronous Javascript - II"),(0,l.kt)("li",{parentName:"ul"},"Class-11 : Asynchronous Javascript - III"),(0,l.kt)("li",{parentName:"ul"},"Class-12 : Testing Javascript & Road to React")))),(0,l.kt)("h3",{id:"sprint-4-mid-term-revision-sprint"},"Sprint-4 ","[Mid Term Revision Sprint]"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"What is Mid Term Revision (MTR) Sprint"),(0,l.kt)("li",{parentName:"ul"},"Why MTR Sprint",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Interviews are fundamentally different and difficult than Evals - on the spot solution, respond to unpredictable circumstances (imagine evals being like a harry potter newspaper where text keeps changing), communication is key, confidence / body lang etc"),(0,l.kt)("li",{parentName:"ul"},"Had lot of success in new Revision batch but that happens only after U6"),(0,l.kt)("li",{parentName:"ul"},"Also need to get reality check of how strong the learning is: lot of overestimation of abilities right now (sprint eval expected scores)"),(0,l.kt)("li",{parentName:"ul"},"(by Rajesh) Revision at end of every block is one of the most requested features requested by students"),(0,l.kt)("li",{parentName:"ul"},"IV Data of 3 people from this gdrive folder: ",(0,l.kt)("a",{parentName:"li",href:"https://drive.google.com/drive/folders/1EK-90b-DLOz3uvH_sIFy5JAmU8cFSiTI?usp=share_link"},"https://drive.google.com/drive/folders/1EK-90b-DLOz3uvH_sIFy5JAmU8cFSiTI?usp=share_link")),(0,l.kt)("li",{parentName:"ul"},"Whatever topics you learnt till now, you didnt get enough time to revise it, you are revising few things by doing assignments , but you might have missed few important things, we will try to cover those things in MTR"))),(0,l.kt)("li",{parentName:"ul"},"What does MTR consist of",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"MTR will consists of all topics of JS101, WEB101, JS201. All important topics of these courses will be discussed in detail"),(0,l.kt)("li",{parentName:"ul"},"It will contain some additional advanced JS201 concepts which are commonly asked in interviews")))),(0,l.kt)("h2",{id:"sprint-5-construct-week"},"Sprint-5 Construct week"),(0,l.kt)("p",null,"todo: examples"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://docs.google.com/spreadsheets/d/1q01_jsf4MmaWd8FtJKVACgdCOQfiYizRT0WAWpZyVdY/edit#gid=1805352756"},"https://docs.google.com/spreadsheets/d/1q01_jsf4MmaWd8FtJKVACgdCOQfiYizRT0WAWpZyVdY/edit#gid=1805352756")," "),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"type-of-problems-you-must-be-able-to-solve-easily-by-the-mid-of-this-course"},"Type of problems, you must be able to solve ",(0,l.kt)("inlineCode",{parentName:"h2"},"easily")," by the mid of this course:"),(0,l.kt)("p",null,"These coding problems (with minimal modifications) are often asked in coding interviews. Even if you have never encountered them, give them a try. It opens up mind for some brand new information & its proved by science."),(0,l.kt)("h3",{id:"problem-1"},"Problem 1."),(0,l.kt)("p",null,"Guess the output"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"function chips() {\n  console.log('sync: chips');\n}\n\nfunction pizza() {\n  setTimeout(()=>{\n    console.log('async: pizza');\n  },0);\n}\n\nfunction main() {\n  chips();\n  pizza();\n  chips();\n  chips();\n  chips();\n}\n\nmain();\n")),(0,l.kt)("h3",{id:"problem-2"},"Problem 2."),(0,l.kt)("p",null,"Guess the output"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'function sayGoodbye() {\n  console.log("Good bye! ", this);\n}\n\nfunction sayHello() {\n  console.log("Helloo! ", this);\n  sayGoodbye();\n}\n\nsayHello();\n')),(0,l.kt)("h3",{id:"problem-3"},"Problem 3."),(0,l.kt)("p",null,"Guess the output"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'function main() {\n\n    function sayRegularHello() {\n      console.log("Regular Hello ", this);\n    }\n    \n    sayRegularHello();\n\n    \n    var sayArrowHello = () => {\n      console.log("Arrow Hello ", this);\n    };\n\n    sayArrowHello();\n}\n\nmain.call({name: \'Vivek\'})\n')),(0,l.kt)("h3",{id:"problem-4"},"Problem 4."),(0,l.kt)("p",null,"What is the output of the script?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'let name = "Ilya";\nalert( `hello ${1}` ); // ?\nalert( `hello ${"name"}` ); // ?\nalert( `hello ${name}` ); // ?\n')),(0,l.kt)("h3",{id:"problem-5"},"Problem 5."),(0,l.kt)("p",null,"What are the values of ",(0,l.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"x")," after the code below?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let a = 2;\nlet x = 1 + (a *= 2);\n\nconsole.log(a,x);\n")),(0,l.kt)("h3",{id:"problem-6"},"Problem 6."),(0,l.kt)("p",null,"What will the result be?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"console.log( null || (2 && 3) || 4 );\n")),(0,l.kt)("h3",{id:"problem-7"},"Problem 7."),(0,l.kt)("p",null,"What will the result be?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let x = (1 && 2) ?? 3;\nalert(x);\n")),(0,l.kt)("p",null,"\u2026 and many more \u2026"),(0,l.kt)("h2",{id:"declaration-declaration-with-initialisation-assignment-reassignment"},"Declaration, Declaration with Initialisation, Assignment, Reassignment"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"//declare or define a variable called firstName\nlet firstName; \n\n// initialize or assign value to a variable\nfirstName = 'John'\n\n// declare & initialize | define a variable and assign a value\nlet lastName = 'Smith';\n\n// re-assign value to a variable\nfirstName = 'Will'\n\n// Access or showing or logging or looking up the variable content\nconsole.log(firstName, lastName)\n")),(0,l.kt)("h2",{id:"what-all-types-of-values-can-be-assigned-to-variables"},"What all types of values can be assigned to variables?"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Primitives (value types)")),(0,l.kt)("p",null,"string"),(0,l.kt)("p",null,"number"),(0,l.kt)("p",null,"boolean"),(0,l.kt)("p",null,"undefined"),(0,l.kt)("p",null,"null"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"bigInt"),(0,l.kt)("p",null,"symbol"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Non Primitives (reference types)")),(0,l.kt)("p",null,"object"),(0,l.kt)("p",null,"array"),(0,l.kt)("p",null,"function"),(0,l.kt)("h2",{id:"dynamic-typing"},"Dynamic Typing"),(0,l.kt)("p",null,"using the ",(0,l.kt)("inlineCode",{parentName:"p"},"typeof")," operator to check types & change them dynamically (with two exeptions)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let xyz = 'Vivek';\nlet xyz = 1;\nlet xyz = true;\nlet xyz = undefined;\nlet xyz = 1234567890123456789012345678901234567890n;\nlet xyz = Symbol('hello');\nlet xyz = null; // a bug in JS :)\n\nlet xyz = {name: 'Vivek'};\nlet xyz = [1,2,3]; // you should use Array.isArray(xyz) and not typeof\nlet xyz = function(){console.log('Hello')}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"bigint","  In JavaScript, the \u201cnumber\u201d type cannot safely represent integer values larger than\xa0",(0,l.kt)("inlineCode",{parentName:"li"},"(2^53-1)"),"  (that\u2019s\xa0",(0,l.kt)("inlineCode",{parentName:"li"},"9007199254740991"),"), or less than\xa0",(0,l.kt)("inlineCode",{parentName:"li"},"-(2^53-1)"),"for negatives. ","  ",(0,l.kt)("inlineCode",{parentName:"li"},"BigInt"),"\xa0type was recently added to the language to represent integers of arbitrary length. A\xa0",(0,l.kt)("inlineCode",{parentName:"li"},"BigInt"),"\xa0value is created by appending\xa0",(0,l.kt)("inlineCode",{parentName:"li"},"n"),"\xa0to the end of an integer:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'// the "n" at the end means it\'s a BigInt\nconst aVeryBigNumber = 1234567890123456789012345678901234567890n;\nconsole.log(typeof aVeryBigNumber)\n'))),(0,l.kt)("li",{parentName:"ul"},"symbols","  The\xa0",(0,l.kt)("inlineCode",{parentName:"li"},"symbol")," type is used to create unique identifiers for objects.  Javascript object has keys of type ",(0,l.kt)("inlineCode",{parentName:"li"},"String")," . Modern Javascript provides a second type that you can use for object keys - the ",(0,l.kt)("inlineCode",{parentName:"li"},"Symbol")," type. Symbols are a new primitive type in ES6. ","  We can create a symbol in any of the following ways:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let symbol1 = Symbol('hello'); // Guarenteed unique value\nlet symbol2 = Symbol.for('world');\n")),"  Symbols can also be created with a label, by passing a string as the first argument. The ",(0,l.kt)("strong",{parentName:"li"},"label")," doesn\u2019t affect the value of the symbol, but is useful for debugging, and is shown if the symbol\u2019s toString() method is called.","  if you try to use a new Symbol using ",(0,l.kt)("inlineCode",{parentName:"li"},"Symbol('hello')")," it will be a new symbol and won't interface with the existing one even if the ",(0,l.kt)("strong",{parentName:"li"},"descriptor")," is the same. On the other hand,  if you try to create a new Symbol using ",(0,l.kt)("inlineCode",{parentName:"li"},"Symbol.for('world')")," , since the descriptor string is same, we will end up overwriting the existing symbol.","  Understanding the problem that ",(0,l.kt)("inlineCode",{parentName:"li"},"Symbol"),"s are designed to solve:","  Symbols are unique and this is the principal advantage of symbols. If we needed to have a string key that is guaranteed to be unique, we may add a counter or a timestamp or a random number, but Symbols looks to be a much cleaner and scalable solution.","  Since symbols are not strings, we cannot use a dot notation for symbol keys. Instead, we use a bracket operator:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let obj = {\n  [symbol1]: 'world'\n}\n\nobj[symbol1] = 'Something else'\n")),"  Symbols being guaranteed unique is especially useful when multiple middlewares are updating the same object. It ensures that a new plugin or module will not accidentally overwrite another important property of the object. ","  Just for the sake of a simple example and some practice Let's say we have a really simple form in our application that takes just two inputs from every anonymous user. ","  It collects in their first name & the way they are feeling today ",(0,l.kt)("inlineCode",{parentName:"li"},"['bad', 'okay' or 'great']"),".","  At the end of every day, we need a summary of the data. We have one big object and all the data must be stored in that object in a key-value pair.","  Here's a possible solution:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let feelingData = {\n  addData: function (name, feeling) {\n    this[name] = feeling;\n  }\n}\n\nfeelingData.addData('John', 'bad');\nfeelingData.addData('Michael', 'good');\nfeelingData.addData('John', 'bad');\nfeelingData.addData('John', 'great');\n\nconsole.log(feelingData);\n\n// John: \"great\"\n// Michael: \"good\"\n")),"  As we can see we are getting a really perverted view of our users mood. This is a really good use case of Javascripts Symbols.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let feelingData = {\n  addData: function (name, feeling) {\n    this[Symbol(name)] = feeling;\n  }\n}\n\nfeelingData.addData('John', 'bad');\nfeelingData.addData('Michael', 'good');\nfeelingData.addData('John', 'bad');\nfeelingData.addData('John', 'great');\n\nconsole.log(feelingData);\n\n// Symbol(John): \"bad\"\n// Symbol(John): \"bad\"\n// Symbol(John): \"great\"\n// Symbol(Michael): \"good\"\n")),"  This looks much more accurate. We only changed line 3 where instead of using the string name of a user as a key to store their response, use used a Symbol with the String descriptor to store their mood.","  Another use-case of Symbols is to partially hide a property in an object.  Take the following example object:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let passcodeSym = Symbol('passcode');\nlet roleSym = Symbol.for('role');\n\nlet obj = {\n  name: 'John doe',\n  age: 36,\n  [passcodeSym]: 'world',\n  [roleSym]: 'trainee'\n}\n\nobj[Symbol('passcode')] = 'Hello'; // will not overwrite but create a new property with the same descriptor\nobj[Symbol.for('role')] = 'developer'; // will overwrite the existing one with the same descriptor\n")),"  The properties with a Symbol as their key is partially hidden in a way that they can not be directly accessed in these obvious ways: ",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"console.log(obj.passcodeSym); // undefined\nconsole.log(Object.getOwnPropertyNames(obj)); // (2)\xa0['name', 'age']\n\nfor (const key in obj) {\n  console.log(key);\n}\n// name\n// age\n\nconsole.log(Object.keys(obj))\nconsole.log(JSON.stringify(obj))\n")),"  However, they are not actually truly hidden because there are ways to see them:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"console.log(Object.getOwnPropertySymbols(obj));\n// (3)\xa0[Symbol(passcode), Symbol(role), Symbol(passcode)]\n\nconsole.log(Reflect.ownKeys(obj));\n//(5)\xa0['name', 'age', Symbol(passcode), Symbol(role), Symbol(passcode)]\n")),"  The Global registry: ","  ",(0,l.kt)("inlineCode",{parentName:"li"},"Symbol.for(key)")," retrieves the symbol for a given key from the registry. If a symbol doesn\u2019t exist for the key, a new one is returned. As you might expect, subsequent calls for the same key will return the same symbol.","  ",(0,l.kt)("inlineCode",{parentName:"li"},"Symbol.keyFor(symbol)")," allows you to retrieve the key for a given symbol. Calling the method with a symbol that doesn\u2019t exist in the registry returns undefined\n")),(0,l.kt)("p",null,"Todo: Provide recording here (Vivek)"),(0,l.kt)("h2",{id:"var-let--const"},(0,l.kt)("inlineCode",{parentName:"h2"},"var"),", ",(0,l.kt)("inlineCode",{parentName:"h2"},"let")," & ",(0,l.kt)("inlineCode",{parentName:"h2"},"const")),(0,l.kt)("p",null,"There are three ways to declare a variable."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"variables declared with ",(0,l.kt)("inlineCode",{parentName:"li"},"let")," are block scoped, ",(0,l.kt)("inlineCode",{parentName:"li"},"var")," are function scoped",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"function scopeTest() {\n  var outerVar = 'outer var';\n  let outerLet = 'outer let';\n\n  if (true) {\n    var innerVar = 'inner var'; // function scoped\n    let innerLet = 'inner let'; // block scoped\n  }\n\n  console.log(innerVar); // inner var\n  console.log(innerLet); // Uncaught ReferenceError: innerLet is not defined\n  \n}\n\nscopeTest();\n")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const name = \"Vivek\";\nname = \"Akash\"; // Uncaught TypeError: Assignment to constant variable.\n\nconst user = {\n  name: 'Vivek'\n}\n\nuser.name = \"Akash\"; // this is called mutating not re-assigning a variable\nconsole.log(user); // {name: 'Akash'}\n\nconst users = ['a', 'b', 'c']\nusers.push('d');\nconsole.log(users); // ['a', 'b', 'c', 'd']\n")),(0,l.kt)("h3",{parentName:"li",id:"var-s-are-function-scoped-and-not-block-scoped"},(0,l.kt)("inlineCode",{parentName:"h3"},"var")," 's are function scoped and not block scoped"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"var firstName = 'Vivek';\n\nif (true) {\n  var firstName = \"Akash\";\n  console.log(firstName); // Akash\n}\n\nconsole.log(firstName); // Akash\n")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"var firstName = 'Vivek';\n\n(function () {\n  var firstName = \"Akash\";\n  console.log(firstName); // Akash\n})();\n\nconsole.log(firstName); // Vivek\n")),(0,l.kt)("h3",{parentName:"li",id:"let-s--const-s-are-block-scoped"},(0,l.kt)("inlineCode",{parentName:"h3"},"let")," 's & ",(0,l.kt)("inlineCode",{parentName:"h3"},"const")," 's are block scoped"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"var firstName = 'Vivek';\n\nif (true) {\n  **let** firstName = \"Akash\";\n  console.log(firstName); // Akash\n}\n\nconsole.log(firstName); // Vivek\n")),"  Another example: ",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"// function\nfunction student() {\n  var studentName = 'Akash';\n  console.log(studentName);\n}\n\nconsole.log(studentName); // Uncaught ReferenceError: studentName is not defined\n\nstudent()\n\n// block \nif (1 === 1) {\n  var studentAge = 26;\n  console.log(studentAge) // 26\n}\n\nconsole.log(studentAge) // 26\n\n// block\nfor (let i = 1; i<=1; i++ ) {\n  var favSubject = 'Javascript';\n  console.log(favSubject) // Javascript\n}\n\nconsole.log(favSubject) // Javascript\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"let")," does not allow re-declaration, ",(0,l.kt)("inlineCode",{parentName:"li"},"var")," allows",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"var a = 5; // 5\nvar a = 3; // 3\n")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let a = 5;\nlet a = 3; // error\n")),"  ",(0,l.kt)("inlineCode",{parentName:"li"},"Uncaught SyntaxError: Identifier 'a' has already been declared"),"  Redeclaring a variable with ",(0,l.kt)("inlineCode",{parentName:"li"},"var")," in a different scope or block changes the value of the outer variable too. For example,",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"var a = 5;\nconsole.log(a); // 5\n{\n    var a = 3;\n    console.log(a); // 3\n}\nconsole.log(a); // 3\n")),"  When a variable declared with ",(0,l.kt)("inlineCode",{parentName:"li"},"var")," is used in a loop, the value of that variable changes. For example,",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"var a = 2;\nfor(var a = 0; a < 3; a++) {\n    console.log('hello world');\n}\nconsole.log(a); // 3\n"))),(0,l.kt)("li",{parentName:"ul"},"Variables declared with ",(0,l.kt)("inlineCode",{parentName:"li"},"let")," , can not be accessed before initialisation",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"function f() {\n    console.log(a); // ReferenceError: Cannot access 'a' before initialization\n    let a = 5;\n}\n\nf();\n")))),(0,l.kt)("p",null,"For most parts, let & const works the same way, the only difference is that the variables declared with const can not be re-assigned."),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("p",null,"a Function is a set of statements that either perform a task or calculates and returns a value;"),(0,l.kt)("p",null,"A function is a set of statements in JS which is"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Callable (executable)"),(0,l.kt)("li",{parentName:"ul"},"It can take arguments"),(0,l.kt)("li",{parentName:"ul"},"has a set of statements that can either perform ",(0,l.kt)("strong",{parentName:"li"},"tasks")," or calculations"),(0,l.kt)("li",{parentName:"ul"},"return a value")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"function addNumbers(n1, n2) {\n  // task\n  let sum = n1 + n2;\n  console.log('sum', sum)\n\n  // return\n  return sum;\n}\n\nlet total = addNumbers(3,2);\nconsole.log('total', total)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"// function declaration\nfunction doSomething() {\n  // tasks | return something\n}\n\n// function expression\nlet fun = function() {\n  // tasks | return something\n}\n\nlet arrFun = () => {\n  // tasks | return something\n}\n\n// discuss variations in arrow functions\n")),(0,l.kt)("p",null,"Discuss the terms ",(0,l.kt)("inlineCode",{parentName:"p"},"defining")," a function vs ",(0,l.kt)("inlineCode",{parentName:"p"},"executing")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"invoking")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"running")," a function."),(0,l.kt)("p",null,"What does a function return if we do not explicitly return any thing?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"// what will it return\nfunction add(a,b) {\n  let c = a + b;\n}\n\nlet result = add();\nconsole.log(result)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Student Task")),(0,l.kt)("p",null,"A short refresher on ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," vs ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://codepen.io/drupalastic/pen/mdKMadx?editors=0012"},"https://codepen.io/drupalastic/pen/mdKMadx?editors=0012")," "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"// nuller is expected to return boolean value null \nfunction nuller() {\n\n}\n\nconsole.log(nuller());\n")),(0,l.kt)("p",null,"Steps to use codepen: "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"make sure to login/signup using your github account"),(0,l.kt)("li",{parentName:"ul"},"fork the codepen"),(0,l.kt)("li",{parentName:"ul"},"read the problem statement, solve it, save it"),(0,l.kt)("li",{parentName:"ul"},"share your codepen url into the chat")),(0,l.kt)("h2",{id:"introduction-to-cp"},"Introduction to CP"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://cp.masaischool.com/assignments/458/view"},"https://cp.masaischool.com/assignments/458/view")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Your assignments & evaluations would be on CP"),(0,l.kt)("li",{parentName:"ul"},"It\u2019s very important to solve your ",(0,l.kt)("strong",{parentName:"li"},"assignments")," to be ready for your ",(0,l.kt)("strong",{parentName:"li"},"evaluations")),(0,l.kt)("li",{parentName:"ul"},"The problems would me more real world"),(0,l.kt)("li",{parentName:"ul"},"You need to get comfortable ",(0,l.kt)("strong",{parentName:"li"},"with reading & understanding problem statements")),(0,l.kt)("li",{parentName:"ul"},"The only way to get good at reading problem statements is practicing them as much as possible.")),(0,l.kt)("p",null,"Note: Remember to make the folder names shorter (without spaces)"),(0,l.kt)("h2",{id:"cp---steps"},"CP - Steps"),(0,l.kt)("p",null,"pre-requisites: "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Node version 14+ should be installed in your machine"),(0,l.kt)("li",{parentName:"ul"},"You must be on the directory"),(0,l.kt)("li",{parentName:"ul"},"Download & extract the zip file to the course directory [",(0,l.kt)("a",{parentName:"li",href:"https://github.com/masai-course/ayush_kumar_pandey_fw22_1143/tree/master/unit-3/sprint-1/day-1/assignments"},"https://github.com/masai-course/<your_directory>/tree/master/unit-3/sprint-1/day-1/assignments"),"]"),(0,l.kt)("li",{parentName:"ul"},"Open the project in VSCode"),(0,l.kt)("li",{parentName:"ul"},"Make sure that the ",(0,l.kt)("inlineCode",{parentName:"li"},"pwd")," is the root directory of the project"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"npm i")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"npm t -- --watchAll")),(0,l.kt)("li",{parentName:"ul"},"Solve"),(0,l.kt)("li",{parentName:"ul"},"Save, add, commit & push your code"),(0,l.kt)("li",{parentName:"ul"},"Submit the URL of your solution"),(0,l.kt)("li",{parentName:"ul"},"Make sure that there are no spaces in any of the directories or file names"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Remember to make the folder names shorter (without spaces) else git may throw unexpected errors with some files.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Keep a json file & node modules folder in one of the parent directories, so that we don\u2019t have to do ",(0,l.kt)("inlineCode",{parentName:"strong"},"npm i")," for all the projects."))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"(There are two different types of problem in CP, this should work for both the types)")),(0,l.kt)("h2",{id:"things--the-places-where-we-store-them"},"Things & the places where we store them"),(0,l.kt)("p",null,"Just like different things are stored in a different way, Javascript stores primitives and non-primitives in a very different way."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Primitives (value types)")),(0,l.kt)("p",null,"string, number, boolean, undefined, null, bigInt, symbol"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Non Primitives (reference types)")),(0,l.kt)("p",null,"object, array, function"),(0,l.kt)("p",null,"let\u2019s see an example with a string & arrays"),(0,l.kt)("h2",{id:"storing-strings-vs-storing-arrays"},"Storing ",(0,l.kt)("inlineCode",{parentName:"h2"},"strings")," vs storing ",(0,l.kt)("inlineCode",{parentName:"h2"},"arrays")),(0,l.kt)("p",null,"Variable created + value directly put on ",(0,l.kt)("inlineCode",{parentName:"p"},"vs")," Variable created + value referenced "),(0,l.kt)("p",null,"Animation: ",(0,l.kt)("a",{parentName:"p",href:"https://vivmagarwal.github.io/course-animations/animations/by-ref-by-val-2/index.html#0"},"https://vivmagarwal.github.io/course-animations/animations/by-ref-by-val-2/index.html#0")," "),(0,l.kt)("p",null,"Python tutor: ",(0,l.kt)("a",{parentName:"p",href:"https://pythontutor.com/render.html#code=let%20str%20%3D%20%22Vivek%22%3B%0Alet%20num%20%3D%20%22999%22%3B%0Alet%20bool%20%3D%20false%3B%0Alet%20nl%20%3D%20null%3B%0Alet%20ud%20%3D%20undefined%3B%0A%0Alet%20obj%20%20%3D%20%7Bname%3A%20'vivek'%7D%3B%0Alet%20arr%20%3D%20%5B1,2,3%5D%3B%0Alet%20fun%20%3D%20function%28a,b%29%7B%20return%20a%2Bb%3B%20%7D&cumulative=false&curInstr=8&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=js&rawInputLstJSON=%5B%5D&textReferences=false"},"link")),(0,l.kt)("h2",{id:"primitive-types-vs-reference-types"},"Primitive Types vs Reference Types"),(0,l.kt)("h3",{id:"primitive-types"},"Primitive types:"),(0,l.kt)("p",null,"String, Number, Boolean, Null, Undefined, Symbol & Bigint are stored/accessed ",(0,l.kt)("strong",{parentName:"p"},"directly.")," These values are fixed."),(0,l.kt)("h3",{id:"reference-types"},"Reference types:"),(0,l.kt)("p",null,"Arrays, Functions & Objects are stored/accessed ",(0,l.kt)("strong",{parentName:"p"},"by reference"),". These can be mutated & hence stored in a much larger area."),(0,l.kt)("h2",{id:"truthyfalsey-values"},"Truthy/falsey Values"),(0,l.kt)("p",null,"We saw in the last lecture that The values that can be assigned to a variable can be classified into ",(0,l.kt)("strong",{parentName:"p"},"primitive")," vs ",(0,l.kt)("strong",{parentName:"p"},"non-primitive")," categories. They can also be classified as ",(0,l.kt)("strong",{parentName:"p"},"truthy")," vs ",(0,l.kt)("strong",{parentName:"p"},"falsey")," values."),(0,l.kt)("aside",null,'\ud83d\udca1 There are only six ***falsey*** values in JavaScript: `undefined` , `null` , `NaN` , `0` , `""` (empty string), and `false`. Anything that is not falsey it truthy.'),(0,l.kt)("p",null,"The easiest way to verify: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let a = null;\n\nif (a) {\n  console.log(`${a} is Truthy.`)\n} else {\n  console.log(`${a} is Falsey.`)\n}\n\n//? null is Falsey.\n")),(0,l.kt)("p",null,"These kind of questions are very common for the entry level technical interviews. Try to answer if the following values are truthy or falsey:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'1\n""\n"null"\n"0"\n[]\n{}\n')),(0,l.kt)("h2",{id:"type-conversions"},"Type conversions"),(0,l.kt)("h3",{id:"string-conversion"},"String conversion"),(0,l.kt)("p",null,"We can also call the\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"String(value)")," function to convert a value to a string"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let original = true;\nlet converted = String(original);\n")),(0,l.kt)("h3",{id:"numeric-conversion"},"Numeric conversion"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"We can use the\xa0",(0,l.kt)("inlineCode",{parentName:"li"},"Number(value)")," function to explicitly convert a\xa0",(0,l.kt)("inlineCode",{parentName:"li"},"value")," to a number"),(0,l.kt)("li",{parentName:"ul"},"Non valid strings passed into ",(0,l.kt)("inlineCode",{parentName:"li"},"Number")," returns ",(0,l.kt)("inlineCode",{parentName:"li"},"NaN"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Edge cases:")," "),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"undefined")," becomes ",(0,l.kt)("inlineCode",{parentName:"p"},"NaN")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"null")," becomes ",(0,l.kt)("inlineCode",{parentName:"p"},"0")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"true")," becomes ",(0,l.kt)("inlineCode",{parentName:"p"},"1")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"false")," becomes ",(0,l.kt)("inlineCode",{parentName:"p"},"0")),(0,l.kt)("p",null," ",(0,l.kt)("inlineCode",{parentName:"p"},"123"),"  becomes ",(0,l.kt)("inlineCode",{parentName:"p"},"123")),(0,l.kt)("h3",{id:"parseint"},"ParseInt"),(0,l.kt)("p",null,"The\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"parseInt")," method parses a value as a string and returns the first integer. If it finds anything other than a number or empty spaces first, it returns ",(0,l.kt)("inlineCode",{parentName:"p"},"NaN")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"parseInt('400 Rs.')")," becomes ",(0,l.kt)("inlineCode",{parentName:"p"},"400")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"parseInt('Rs. 400')")," becomes ",(0,l.kt)("inlineCode",{parentName:"p"},"NaN")),(0,l.kt)("h3",{id:"technique-most-used-in-the-industry-coercion-technique"},"Technique most used in the industry (coercion technique)"),(0,l.kt)("p",null,"Put a ",(0,l.kt)("inlineCode",{parentName:"p"},"+")," Mathematical operator in front of a number & it will convert value to a number automatically. If the string represents a non number, ",(0,l.kt)("inlineCode",{parentName:"p"},"NaN")," is returned."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'console.log(+"123")\n')),(0,l.kt)("h3",{id:"student-task-1"},"Student task:"),(0,l.kt)("p",null,"When will you use ",(0,l.kt)("inlineCode",{parentName:"p"},"ParseInt")," instead of coercion technique in your code?"),(0,l.kt)("h2",{id:"boolean-conversion"},"Boolean Conversion"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Boolean")," function converts falsey values to ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," and the rest of the values to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'console.log(Boolean("ABC")); // true\nconsole.log(Boolean("")); // false\n')),(0,l.kt)("p",null,"Boolean conversion technique most used in the industry (coercion technique, double negation)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'console.log(!!("ABC")); // true\nconsole.log(!!("")); // false\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"do not be scared by the heavy word coercion. It simply means automatic type conversion")),(0,l.kt)("h2",{id:"ternary-operator"},"Ternary Operator"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let status = marks > 50 ? 'pass' : 'fail';\n")),(0,l.kt)("p",null,"Syntax:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"condition ? exprIfTruthy : exprIfFalsy\n")),(0,l.kt)("h2",{id:"logical-operators-with-booleans"},"Logical operators ","[with booleans]"),(0,l.kt)("p",null,"It was taught in Unit-1 Just check if students are able to solve these problems, move ahead. Else make sure that they understand it completely. It\u2019s used a lot in react."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"What will these expressions return:"),"  ",(0,l.kt)("em",{parentName:"li"},"When we use logical OR (||) , javascript looks for the first truthy value and returns it as soon as it finds it. If it does not find any truthy value, it returns the last falsy value it finds."),"  ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},"*")))))))))),"in other words, logical OR (||) is eager to find one truthy value, once it finds it - it happily returns. It does not even look any further. But if it does not find any - with lots of sadness it returns the last falsey value.",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},"*")))))))))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let a = false;\nlet b = 0;\nlet c = null;\n\nlet z = a || b || c;\n\nconsole.log(z);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let a = false;\nlet b = 'Vivek';\nlet c = 'Rishi';\n\nlet z = a || b || c;\n\nconsole.log(z);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'let defaultUser = "Vivek";\nlet user = "Akash"\nconsole.log(defaultUser || user)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'let defaultUser = false;\nlet user = "Akash"\nconsole.log(defaultUser || user)\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"What will these expressions return"),"  ",(0,l.kt)("em",{parentName:"li"},"When we use logical AND (&&), Javascript either returns the first falsey value it finds, else if all the operands are truthy, it returns the last truthy value."),"  ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},"*")))))))))),"in other words, logical AND (&&) is eager to find one falsey value, once it finds it - it happily returns. It does not even look any further. But if it does not find any - with lots of sadness it returns the last truthy value.",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},(0,l.kt)("strong",{parentName:"strong"},"*")))))))))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let a = 'Prachi';\nlet b = 'Vivek';\nlet c = 'Rishi';\n\nlet z = a && b && c;\n\nconsole.log(z);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let a = 0;\nlet b = 'Vivek';\nlet c = 'Rishi';\n\nlet z = a && b && c;\n\nconsole.log(z);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let bankbalance = 100;\nlet accountactive = true;\n\n(bankbalance > 0) && (accountactive) && console.log('active');\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let bankbalance = 100;\nlet accountactive = false;\n\n(bankbalance > 0) && (accountactive) && console.log('not active');\n")),(0,l.kt)("p",null,"The precedence of AND ",(0,l.kt)("inlineCode",{parentName:"p"},"&&")," is higher than ",(0,l.kt)("inlineCode",{parentName:"p"},"||"),", so it executes first."),(0,l.kt)("h2",{id:"nullish-coalescing-operator-"},"*",(0,l.kt)("strong",{parentName:"h2"},"*Nullish coalescing operator '??'**")),(0,l.kt)("p",null,"The nullish coalescing operator is written as two question marks\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"??"),"."),(0,l.kt)("p",null,"As it treats\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"null"),"\xa0and\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"undefined"),"\xa0similarly. ()"),(0,l.kt)("p",null,"The result of\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"a ?? b"),"\xa0is:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if\xa0",(0,l.kt)("inlineCode",{parentName:"li"},"a"),"\xa0isn\u2019t null or undefined, then\xa0",(0,l.kt)("inlineCode",{parentName:"li"},"a"),","),(0,l.kt)("li",{parentName:"ul"},"if\xa0",(0,l.kt)("inlineCode",{parentName:"li"},"a"),"\xa0is null or undefined, then\xa0",(0,l.kt)("inlineCode",{parentName:"li"},"b"),".")),(0,l.kt)("p",null,"In other words,\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"??"),"\xa0returns the first argument if it\u2019s not\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"null/undefined"),". Otherwise, the second one."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'let user;\nalert(user ?? "Anonymous"); // Anonymous\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'let user = "John";\nalert(user ?? "Anonymous"); // John (user is not null/undefined)\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"What do you think may be the purpose of introducing ",(0,l.kt)("inlineCode",{parentName:"li"},"??")," , isn\u2019t it similar to ",(0,l.kt)("inlineCode",{parentName:"li"},"||")," . When would you use it over ",(0,l.kt)("inlineCode",{parentName:"li"},"||"),"  ",(0,l.kt)("inlineCode",{parentName:"li"},"||")," treats all falsey values as empty values. it includes ",(0,l.kt)("inlineCode",{parentName:"li"},'""')," , ",(0,l.kt)("inlineCode",{parentName:"li"},"0")," & ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),"  When we want to treat these values as different from ",(0,l.kt)("inlineCode",{parentName:"li"},"null")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"undefined")," its best to use ",(0,l.kt)("inlineCode",{parentName:"li"},"??"),"  example we would certainly want to treat these differently",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let isUserActive = false; // the user is blocked for some reason\n")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let isUserActive; // as nothing is set, user is probably active\n")),"  Similarly, if ",(0,l.kt)("inlineCode",{parentName:"li"},"userBalance")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"0"),", then, may be we want to treat if differently from ",(0,l.kt)("inlineCode",{parentName:"li"},"null"),", We may want to treat ",(0,l.kt)("inlineCode",{parentName:"li"},'""')," differently from ",(0,l.kt)("inlineCode",{parentName:"li"},"undefined")," ","  if ",(0,l.kt)("inlineCode",{parentName:"li"},"userBalance")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"null")," you want to output the string ",(0,l.kt)("inlineCode",{parentName:"li"},"please deposit some initial amount")," but if the ",(0,l.kt)("inlineCode",{parentName:"li"},"userBalance")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"0")," you want to output the string ",(0,l.kt)("inlineCode",{parentName:"li"},"your balance is 0"),"  The important difference between them is that:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"||"),"\xa0returns the first\xa0",(0,l.kt)("em",{parentName:"li"},"truthy"),"\xa0value."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"??"),"\xa0returns the first\xa0(non null/undefined)\xa0value.")))),(0,l.kt)("h2",{id:"loops"},"Loops"),(0,l.kt)("h3",{id:"for"},"For"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"// For loop\nfor(initialExpression; conditionExpression; incrementExpression){\n  statements\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"for (let i = 0; i < 5; i++) {\n  console.log('Hello world')\n}\n")),(0,l.kt)("h3",{id:"while"},"While"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let i = 0; // external loop counter\n\nwhile (condition) {\n  statement\n  incrementExpression\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let i = 0;\nwhile ( i < 5) {\n    console.log('Hello world');\n  i++;\n}\n")),(0,l.kt)("h3",{id:"do--while"},"do \u2026 while"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let i = 0; // external loop counter\n\ndo {\n  if (i % 2 !== 0) { console.log(i) } // Statement executed at least once\n  i++; // increment expression\n} while (i <= 10); // condition expression\n")),(0,l.kt)("h3",{id:"for--in"},"for \u2026 in"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Iterating")," over the ",(0,l.kt)("strong",{parentName:"p"},"properties (keys) of an object")," or ",(0,l.kt)("strong",{parentName:"p"},"indexes of an array")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"for (let propertyVariable in ObjectOrArray){\n  // statement\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const student = {\n  firstName: 'Vivek',\n  rank: 1,\n  age: 36\n}\n\nfor (let key in student) {\n  console.log(key);\n  console.log(student[key]);\n}\n\nconst subjects = ['javascript', 'html', 'css'];\n\nfor (let index in subjects) {\n  console.log(index);\n  console.log(subjects[index]);\n}\n")),(0,l.kt)("h3",{id:"for--of"},"for \u2026 of"),(0,l.kt)("p",null,"Iterating over ",(0,l.kt)("strong",{parentName:"p"},"arrays")," & not concerned about index"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"\nconst subjects = ['javascript', 'html', 'css'];\n\nfor (let subject of subjects) {\n  console.log(subject);\n}\n")),(0,l.kt)("h2",{id:"arrow-functions"},"Arrow functions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"// Regular function\nfunction greet(greeting, name) {\n  return `${greeting}, from ${name}`;\n}\n\n// Arrow function\nlet newGreet = (greeting, name) => {\n  return `${greeting}, from ${name}`;\n}\n")),(0,l.kt)("p",null,"implicit return: If all you have is a single expression that returns a value, you can get rid of the braces and the return keyword. Its a very common usage."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let newGreet = (greeting, name) => `${greeting}, from ${name}`\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Edge case:")," To implicitly return an object, surround it with parentheses."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const userData = () => ({\n  name: 'Vivek',\n  email: 'vivek@example.com'\n})\n\nconsole.log(userData()); // {name: 'Vivek', email: 'vivek@example.com'}\n")),(0,l.kt)("h2",{id:"object-shorthand"},"Object shorthand"),(0,l.kt)("p",null,"If the name of the key matches the name of the variable that's going into that key, you can get rid of the value and just use the variable name"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const userData = (name, email) => ({\n  name,\n  email\n})\n")),(0,l.kt)("h2",{id:"statements-vs-expressions"},"Statements vs Expressions"),(0,l.kt)("p",null,"An expression is anything that evaluates to a value. Expressions are usually on the right-hand side of statements. "),(0,l.kt)("p",null,"examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"1+2\ntrue ? 'yes' : 'no'\n[1,2,3]\n{name: 'Vivek'}\n")),(0,l.kt)("p",null,"statements:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let sum = 1+2;\nif .. else\nwhile\ntry .. catch\nlet arr = [1,2,3]\nlet obj = {name: 'Vivek'}\n")),(0,l.kt)("h2",{id:"lexical-scope"},"Lexical Scope"),(0,l.kt)("p",null,"There are three scopes. Look at the screenshot and try to make a sense of it."),(0,l.kt)("p",null,"Javascript is a ",(0,l.kt)("strong",{parentName:"p"},"two-pass")," system. The code is processed (or compiled or parsed) first. In this first phase, the scopes are set up and the grammar of your code is validated. Then in the second phase, the code is executed. "),(0,l.kt)("p",null,"Javascript organizes scopes with ",(0,l.kt)("strong",{parentName:"p"},"functions")," and ",(0,l.kt)("strong",{parentName:"p"},"blocks"),". In the processing phase, the scope for every identifier (variable) is set."),(0,l.kt)("p",null,'In a lexically scoped language (which Javascript is), all of the identifiers & scopes that we dealing with, are determined in the first pass (compile-time). The decisions that I make about scope are author time decisions. When I write a function & put a variable there, it means that the variable is always gonna be scoped to that function. The place where the variable "',(0,l.kt)("strong",{parentName:"p"},"sits"),'" physically in your code and the variables that ',(0,l.kt)("strong",{parentName:"p"},'"surrounds"')," it physically is ",(0,l.kt)("strong",{parentName:"p"},"important"),". "),(0,l.kt)("p",null,"Another, important thing about lexical scopes is that if the compiler cannot find a variable's declaration within the scope, it looks up to its parents and ancestor's scope."),(0,l.kt)("p",null,"In a non-strict environment, if a variable is used and never declared, JS auto declares it in the global scope. it's a bad part of JS. We should always operate in strict mode."),(0,l.kt)("h2",{id:"rest-and-spread"},"Rest and Spread"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"// rest operator helps collect all the arguments in an array\nfunction doSomething(first, second, ...rest) {\n  console.log(first, second, rest); // rest is guarenteed to be an array\n}\n\ndoSomething('one', 'two', 'three', 'four', 'five');\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"// The spread operator explodes array or objects in place\nlet arr = [1, 3, 5, 7, 9];\nconsole.log(...arr); //-> 1 3 5 7 9\n\nlet user = {\n  firstName: 'Vivek',\n  lastName: 'Agarwal'\n}\n\nconsole.log({\n  ...user,\n  fullName: `${user.firstName} ${user.lastName}`\n});\n//-> {firstName: 'Vivek', lastName: 'Agarwal', fullName: 'Vivek Agarwal'}\n")),(0,l.kt)("h2",{id:"destructuring-arrays-and-objects"},"Destructuring Arrays and Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const arr = [1, 3, 5, 7, 9];\n\nconst [first, second, ...rest] = arr;\nconsole.log(first, second, rest);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"let user = {\n  firstName: 'Vivek',\n  lastName: 'Agarwal',\n  age: 38,\n  posts: [\n    {title: 'Post 1', comments: 10},\n    {title: 'Post 2', comments: 11}\n  ]\n}\n\nconst { firstName:first, lastName, age=40, ...rest } = user;\nconsole.log(first, lastName, age, rest);\n\n// only the deepest keys become variables\nconst { posts: [{ title }, {title: t2}] } = user;\nconsole.log(title, t2);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"// a function that returns an array of a number and a function\nfunction useState(num) {\n  let count = num;\n  let setCount = function () {\n    console.log(`setting the count: ${count}`);\n  }\n\n  return [count, setCount]\n}\n\n// way 1\nlet resultArr = useState(20);\nlet resultCount = resultArr[0];\nlet resultSetFunction = resultArr[1];\n\nresultSetFunction(); //-> setting the count: 20\n\n// the destructuring way, super neat\nlet [count, setCount] = useState(30);\n\nsetCount(); //-> setting the count: 30\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"// we know that the function will receive an object with keys firstName & lastName\n\nfunction printFullName({ firstName, lastName }) {\n  console.log(`${firstName} ${lastName}`);\n}\n\nprintFullName({\n  firstName: 'Vivek',\n  lastName: 'Agarwal'\n})\n\n//-> Vivek Agarwal\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const user = {\n  id: 339,\n  name: 'John',\n  age: 42,\n  education: {\n    degree: 'Masters'\n  }\n};\n\nconst  { name, education: {degree}}  = user;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const user = {\n  id: 339,\n  name: 'John',\n  age: 42,\n  education: {\n    degree: {\n      name: 'BCA'\n    }\n  }\n};\n\nconst {name:fname, education: {degree: {name:degreeName}}} = user;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const user = {\n  id: 339,\n  name: 'John',\n  age: 42,\n  subjects: ['HTML', 'CSS', 'Javascript'],\n  education: {\n    degree: {\n      name: 'BCA'\n    }\n  }\n};\n\nconst {\n  name:fname, \n  education: {degree: {name:degreeName}},\n  subjects: [sub1,,sub3]\n} = user;\n")),(0,l.kt)("h2",{id:"hoisting"},"Hoisting"),(0,l.kt)("p",null,"In the compilation/parsing phase (phase-1), We have all the tokens/identifiers available before the execution phase starts. Of course, the assignment happens in the execution phase, but yes, all the variables are available to us, they exist in the memory,  immediately after the parsing phase (phase-1)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"let"),"s and ",(0,l.kt)("inlineCode",{parentName:"li"},"const"),"s hoist to a block, whereas ",(0,l.kt)("inlineCode",{parentName:"li"},"var"),"s hoist to a function."),(0,l.kt)("li",{parentName:"ul"},"In case of ",(0,l.kt)("inlineCode",{parentName:"li"},"var"),", in the compilation/parsing phase, it is initialized to ",(0,l.kt)("inlineCode",{parentName:"li"},"undefined")),(0,l.kt)("li",{parentName:"ul"},"In case of ",(0,l.kt)("inlineCode",{parentName:"li"},"let"),", in the compilation/parsing phase, a token is created, but it is not initialized at all (TDZ error - uninitialized)")),(0,l.kt)("h2",{id:"iife---immediately-invoked-function-expression"},"IIFE - Immediately invoked function expression"),(0,l.kt)("p",null,"We keep our code inside a function, in order to prevent pollution of the global scope. We execute it immediately to make sure that our code actually runs."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"(function () {\n  // our code here\n})();\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Very important note: Make sure that the statement above it ends with a semicolon else javascript engine might teat it as a continuation of that statement and throw weird errors.")),(0,l.kt)("h2",{id:"resources"},"Resources:"),(0,l.kt)("h2",{id:"make-sure-that-students-watch-both-the-pre-class-videos-for-the-array-methods-very-important-else-it-will-be-difficult-to-complete-array-methods-in-1-class"},"Make sure that students watch both the pre-class videos for the ARRAY Methods. Very important, else it will be difficult to complete Array methods in 1 class."),(0,l.kt)("h2",{id:"the-one-thing"},"The one thing"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"There are just a few things; if you master them; every thing else becomes easy;")),(0,l.kt)("p",null,"Javascript - "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Using Arrays & Objects efficiently"),(0,l.kt)("li",{parentName:"ul"},"Mastering the ",(0,l.kt)("inlineCode",{parentName:"li"},"this")," keyword"),(0,l.kt)("li",{parentName:"ul"},"Prototypical inheritance")))}m.isMDXComponent=!0}}]);